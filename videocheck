#!/usr/bin/python

# todo
# - audio dc offset?
# - audio clipping
# - cropdetect

from subprocess import check_output, STDOUT
import sys
import re
import math

enable_log_info = False
silencedetect_duration = 10
silencedetect_level = "-60dB"
blackdetect_duration = 1
blackdetect_level = 0.0
cropdetect_round = 2
cropdetect_duration = 1
volumedetect_level = -0.5

enable_skip_frame = False



def main():
    # process arguments
    for arg in sys.argv[1:]:
        global enable_skip_frame, enable_log_info

        # flags
        # Since flags are processed along with the video files (instead of as a separate loop), flags will only take effect for subsequent files.
        if arg == "-v":
            enable_log_info = True

        elif arg == "--fast":
            enable_skip_frame = True

        elif arg == "--help" or arg == "-?":
            print "Usage: videocheck [OPTION]... [FILE]..."
            print "Check video FILEs for formatting according to Tuts+ course video standards."
            print "Test encoding, resolution, presence of audio and video channels."
            print "Also detect black regions in the video channel and silent regions in the audio channel."
            print ""
            print "Options:"
            print "  -v            verbose output, output video encoding info"
            print "  -?, --help    display this message"
            print "  --fast        fast mode, only key frames of the video will be examined"
            print "                (may introduce inaccuracies)"
            print ""
            print "Example:"
            print "  videocheck *.mp4"
            return

        # files
        else:
            print '#', arg
            print ''

            try:
                probeoutput=videoprobe(arg)
            except:
                log_error("Invalid video file")
            else:
                media_info = parse_media_info(arg, probeoutput)
                if (media_info["valid"]):
                    filteroutput=run_filters(arg)
                    parse_silencedetect(media_info, filteroutput)
                    parse_blackdetect(media_info, filteroutput)
                    parse_cropdetect(media_info, filteroutput)
                    parse_volumedetect(media_info, filteroutput)

            print ''
            print ''

# this function should throw an exception if the video file is not valid
def videoprobe(filename):
    probeoutput = check_output(["ffprobe", filename],  stderr=STDOUT)
    return probeoutput

# gets basic information about the video file and checks for format errors
# the "output" parameter is the output of the ffprobe command run on the target video file
def parse_media_info(filename, output):

    media_info = {"filename": filename}

    # process duration information
    durations_match = re.search("Duration:\ (\d\d):(\d\d):(\d\d)\.(\d+)", output)
    if (not durations_match):
        log_error("Video has no duration")

    else:
        duration_h=int(durations_match.group(1))
        duration_m=int(durations_match.group(2))
        duration_s=int(durations_match.group(3))

        if (duration_h>0):
            log_info(str.format("Duration: {0}h {1}m {2}s", duration_h, duration_m, duration_s))
        else:
            log_info(str.format("Duration: {0}m {1}s", duration_m, duration_s))

        media_info["duration_h"]=duration_h
        media_info["duration_m"]=duration_m
        media_info["duration_s"]=duration_s
        media_info["duration"] = duration_s+duration_m*60+duration_h*60*60


    # process video format information
    video_match = re.search("Video: (.*)", output)
    if (not video_match):
        log_error("No video channel")
        media_info["valid"]=False
        return media_info

    else:
        video_info = video_match.group(1)

        media_info["video_info"]=video_info

        log_info(str.format("Video Encoding: {0}", video_info))

        res_match = re.search("(\d\d+)x(\d\d+)", video_info)
        res = res_match.group(0)
        width = int(res_match.group(1))
        height = int(res_match.group(2))

        media_info["res"]=res
        media_info["width"]=width
        media_info["height"]=height

        h264 = re.search("h264", video_info)

        if (not h264):
            log_error(str.format("Invalid video encoding (not h264): {0}", video_info))
            media_info["h264"] = False

        else:
            media_info["h264"] = True

        if (res!="1280x800" and res!="1280x720"):
            log_error(str.format("Invalid video resolution (not 1280x720 or 1280x800): {0}", res))


    # process audio format information
    audio_match = re.search("Audio: (.*)", output)
    if (not audio_match):
        log_error("No audio channel")
        media_info["valid"]=False
        return media_info

    else :
        audio_info = audio_match.group(1)
        media_info["audio_info"] = audio_info
        log_info(str.format("Audio Encoding: {0}", audio_info))

    # if no critical errors have occured, the video can be processed
    media_info["valid"]=True
    return media_info


# the filters are run in a single pass, for faster execution
# the output of the ffmpeg session that runs these filters is returned
def run_filters(filename):

    # set up parameters to detection filters
    silencedetect_params = str.format("noise={0}:d={1}", silencedetect_level, silencedetect_duration)
    blackdetect_params = str.format("pix_th={0}:d={1}", blackdetect_level, blackdetect_duration)
    cropdetect_params = str.format("reset=1:round={0}:limit={1}", cropdetect_round, blackdetect_level)

    # set up parameters to ffmpeg command
    params = []
    if (enable_skip_frame):
        params += ["-skip_frame", "nokey"]
    params += ["-i", filename]
    params += ["-af", "silencedetect="+silencedetect_params + "," + "volumedetect"]
    params += ["-vf", "blackdetect="+blackdetect_params + "," + "cropdetect="+cropdetect_params]
    params += ["-f", "null", "-"]

    # run filters and return
    output = check_output(["ffmpeg"]+params, stderr=STDOUT)
    return output


def parse_silencedetect(media_info, output):
    lines = re.findall(".*silencedetect.*", output)

    # silencedetect information is scattered across multiple lines
    # so we'll accumulate silence period information into a stack
    silence_regions = []
    for line in lines:

        if (re.search("silence_start", line)) :
            start = math.floor(float(re.search("silence_start:\ (-?\d+\.\d+)", line).group(1)))
            silence_regions.append({"start": start})

        if (re.search("silence_end", line)) :
            end = math.ceil(float(re.search("silence_end: (-?\d+\.\d+)", line).group(1)))
            duration = math.ceil(float(re.search("silence_duration: (-?\d+\.\d+)", line).group(1)))
            silence = silence_regions.pop()
            silence["end"]=end
            silence["duration"]=duration
            silence_regions.append(silence)



    # after all the lines have been read, read through the stack and display the results
    for silence in silence_regions:
        # we can ignore silence_regions at the end of the video?

        if not "end" in silence and silence["start"]<1 :
            log_error("Silent audio found in entire video")
        elif not "end" in silence:
            log_error(str.format("Silent audio region found: from {0} to end ({1})", format_minsec(silence["start"]), format_minsec(media_info["duration"])))
        else:
            log_error(str.format("Silent audio region found: from {0} to {1} (total {2} seconds)", format_minsec(silence["start"]), format_minsec(silence["end"]), int(silence["duration"])))



def parse_blackdetect(media_info, output):
    lines = re.findall(".*blackdetect.*", output)

    for line in lines:
        start = math.floor(float(re.search("black_start:(-?\d+(\.\d+)?)", line).group(1)))
        end = math.ceil(float(re.search("black_end:(-?\d+(\.\d+)?)", line).group(1)))
        duration = math.ceil(float(re.search("black_duration:(-?\d+(\.\d+)?)", line).group(1)))

        log_error(str.format("Black video region found: from {0} to {1} (total {2} seconds)", format_minsec(start), format_minsec(end), int(duration)))

def parse_cropdetect(media_info, output):
        lines = re.findall(".*cropdetect.*", output)

        crop_regions = []
        in_crop_region = False

        for line in lines:
            width = int(re.search("crop=(-?\d+):-?\d+", line).group(1))
            height = int(re.search("crop=-?\d+:(-?\d+)", line).group(1))
            time = float(re.search("t:(-?\d+.\d+)", line).group(1))

            # find the start of a cropped region
            # note: a negative width and height indicates an entirely black frame, we can ignore this because it should be detected by blackdetect
            if (not width<0 and not height<0) and (width!=media_info["width"] or height!=media_info["height"]):
                if not in_crop_region:
                    in_crop_region = True
                    crop = {"start": time, "width":width, "height":height}
                    crop_regions.append(crop)
            else:
                if in_crop_region:
                    in_crop_region = False
                    crop_region = crop_regions.pop()
                    crop_region["end"] = time
                    crop_regions.append(crop_region)

        for crop in crop_regions:
            if not "end" in crop and crop["start"]<1:
                log_error(str.format("Black border found on entire video (active area {0}x{1})", crop["width"], crop["height"]))
            elif not "end" in crop:
                log_error(str.format("Black border region found (active area {2}x{3}): from {0} to end ({1})", format_minsec(crop["start"]), format_minsec(media_info["duration"]), crop["width"], crop["height"]))
            elif (crop["end"]-crop["start"]) > cropdetect_duration:
                log_error(str.format("Black border region found (active area {2}x{3}): from {0} to {1}", format_minsec(crop["start"]), format_minsec(crop["end"]), crop["width"], crop["height"]))

def parse_volumedetect(media_info, output):
    #lines = re.findall(".*volumedetect.*", output)

    max_volume = float(re.search(".*volumedetect.*max_volume: (-?\d+(\.\d+)?) dB", output).group(1))

    if max_volume > volumedetect_level:
        log_error(str.format("Possible clipping: maximum volume {0} dB", max_volume))

    log_info(str.format("Maximum volume {0} dB", max_volume))

# formats the given time in seconds to a minutes:seconds string
def format_minsec(time_seconds):
    return str.format("{0:d}:{1:02d}", int(time_seconds/60), int(time_seconds%60))

# logs errors
def log_error(msg):
    print " - (error)", msg


# logs info messages if they are enabled
def log_info(msg):
    if enable_log_info:
        print " - (info) ", msg


main()
